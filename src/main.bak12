/*
 * 函数指针
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

char showmenu(void);

void eatline(void);

void show(void(*fp)(char *), char *str);

void toUpper(char *);

void toLower(char *);

void transpose(char *);

void dummy(char *);


int main(int argc, char *argv[]) {

    char line[81];
    char copy[81];
    char choice;
    void (*fp)(char *);
    puts("enter a string :");
    while (gets(line) != NULL && line[0] != '\0') {
        while ((choice = showmenu()) != 'n') {
            switch (choice) {
                case 'u':
                    fp = toUpper;
                    break;
                case 'l':
                    fp = toLower;
                    break;
                case 't':
                    fp = transpose;
                    break;
                case 'o':
                    fp = dummy;
                    break;
            }
            strcpy(copy, line);
            show(fp, copy);
        }
        puts("enter a string");
    }
    puts("byte!");


    return EXIT_SUCCESS;

}

char showmenu(void) {
    char ans;
    puts("enter menu choice:");
    puts("u)uppercase l)lowercase");
    puts("t)transeposed case  o)original case");
    puts("n)next string");

    ans = getchar();
    ans = tolower(ans);
    eatline();
    while (strchr("ulton", ans) == NULL) {
        puts("please enter a u,l,t.o,or n:");
        ans = tolower(getchar());
        eatline();
    }
    return ans;
}

void eatline(void) {
    while (getchar() != '\n') {
        continue;

    }
}

void toUpper(char *str) {
    while (*str) {
        *str = toupper(*str);
        str++;
    }
}

void toLower(char *str) {
    while (*str) {
        *str = tolower(*str);
        str++;
    }
}

void transpose(char *str) {
    while (*str) {
        if (islower(*str)) {
            *str = toupper(*str);
        } else if (isupper(*str)) {
            *str = tolower(*str);
        }
        str++;
    }
}

void dummy(char *str) {
    //do nothing
}

void show(void(*fp)(char *), char *str) {
    (*fp)(str);
    puts(str);
}





